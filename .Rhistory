deletion.rate = 0.2,
test.data.missing$control_sd = delete.function(dat.vector = test.data.missing$control_sd,
deletion.rate = 0.2,
deletion.chance.vector = rep(1,5))
test.data.missing
test.data.missing$control_sd = impute.function(data.with.missing = test.data.missing[,c(1,2,3)],
column.name.with.missing.values = "control_sd",
imputation.method = "pmm")
effect.size.calculation.function = function(data, effect.size.metric){
effect.sizes = escalc(measure = effect.size.metric, data= data, append = FALSE,
m1i = treat_mean, n1i = treat_n, sd1i = treat_sd, m2i = control_mean, n2i = control_n, sd2i = control_sd)
return(effect.sizes)
}
effect.size.calculation.function(data = test.data.missing,
effect.size.metric = "ROM")
effect.size.calculation.function(data = test.data.missing,
effect.size.metric = "ROM")
effect.size.calculation.function = function(data, effect.size.metric){
effect.sizes = escalc(measure = effect.size.metric, data= data, append = TRUE,
m1i = treat_mean, n1i = treat_n, sd1i = treat_sd, m2i = control_mean, n2i = control_n, sd2i = control_sd)
return(effect.sizes)
}
effect.size.calculation.function(data = test.data.missing,
effect.size.metric = "ROM")
test.data.missing
test.data.missing = effect.size.calculation.function(data = test.data.missing,
effect.size.metric = "ROM")
?rma.uni
meta_analysis.function = function(data){
rma.temp = rma.uni(yi=data$yi,vi=data$vi,method="REML")
}
meta_analysis.function = function(data){
rma.temp = rma.uni(yi=data$yi,vi=data$vi,method="REML")
rma.temp.results = data.frame("grand_mean" = rma.temp$b[1],
"grand_mean_lb" = rma.temp$ci.lb[1],
"grand_mean_ub" = rma.temp$ci.ub[1])
return(rma.temp.results)
}
test.data.missing.rma.results = meta_analysis.function(test.data.missing)
test.data.missing.rma.results
meta_analysis.function = function(data){
rma.temp = rma.uni(yi=data$yi,vi=data$vi,method="REML")
rma.temp.results = data.frame("grand_mean" = rma.temp$b[1],
"grand_mean_lb" = rma.temp$ci.lb[1],
"grand_mean_ub" = rma.temp$ci.ub[1])
return(rma.temp)
}
test.data.missing.rma.results = meta_analysis.function(test.data.missing)
test.data.missing.rma.results
forest(test.data.missing.rma.results)
meta_analysis.function = function(data){
rma.temp = rma.uni(yi=data$yi,vi=data$vi,method="REML")
rma.temp.results = data.frame("grand_mean" = rma.temp$b[1],
"grand_mean_lb" = rma.temp$ci.lb[1],
"grand_mean_ub" = rma.temp$ci.ub[1])
return(rma.temp.results)
}
test.data.missing.rma.results = meta_analysis.function(test.data.missing)
test.data =dat.raw
test.data.missing$control_sd = delete.function(dat.vector = test.data.missing$control_sd,
deletion.rate = 0.2,
deletion.chance.vector = rep(1,5))
test.data =dat.raw
test.data.missing = test.data
test.data.missing$control_sd = delete.function(dat.vector = test.data.missing$control_sd,
deletion.rate = 0.2,
deletion.chance.vector = rep(1,5))
deletion.chance.slope = 1
test.data = dat.raw
install.packages("ROCR")
library(ROCR)
data(ROCR.simple)
test.data = dat.raw
data.size = c(1)
?
?list
result.list = list()
result.list
a= ("a","b","c")
a= c("a","b","c")
for(i in a){}
for(i in a){print(a)}
for(i in a){print(i)}
deletion.minimum = 0.02
deletion.maximum = 0.9
?seq
deletion.minimum = 0.02
deletion.maximum = 0.9
deletion.step = 0.1
repetitions.per.step = 1
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
del.rate.vector
deletion.minimum = 0.02
deletion.maximum = 0.9
deletion.step = 0.01
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
del.rate.vector
for(del.rate.temp in del.rate.vector){
print(del.rate.temp)
}
del.chance.vector = seq(1:nrow(dat.raw)) * deletion.chance.slope
del.chance.vector
del.chance.vector = dat.raw$treat_mean * deletion.chance.slope
del.chance.vector
dat.raw$treat_mean
del.chance.vector = dat.raw$treat_mean * deletion.chance.slope
del.chance.vector
names(dat.raw)
one.run.of.grand.mean.calculation.function = function(del.rate.temp,del.chance.vector.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.raw
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate,
deletion.chance.vector = del.chance.vector)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = "pmm")
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = "ROM")
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
del.chance.vector = dat.raw$treat_mean * deletion.chance.slope
one.run.of.grand.mean.calculation.function = function(del.rate.temp,del.chance.vector.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.raw
del.chance.vector = dat.raw$treat_mean * deletion.chance.slope
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate,
deletion.chance.vector = del.chance.vector)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = "pmm")
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = "ROM")
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
one.run.of.grand.mean.calculation.function = function(del.rate.temp,del.chance.vector.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.raw
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate,
deletion.chance.vector = del.chance.vector)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = "pmm")
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = "ROM")
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
one.run.of.grand.mean.calculation.function = function(data.raw, del.rate.temp,del.chance.vector.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = data.raw
del.chance.vector = data.raw$treat_mean * deletion.chance.slope
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate,
deletion.chance.vector = del.chance.vector)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = "pmm")
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = "ROM")
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
one.run.of.grand.mean.calculation.function = function(data.raw, del.rate.temp,del.chance.vector.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = data.raw
del.chance.vector = data.raw$treat_mean * deletion.chance.slope
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate,
deletion.chance.vector = del.chance.vector)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = "pmm")
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = "ROM")
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
one.run.of.grand.mean.calculation.function = function(data.raw, del.rate.temp,deletion.chance.slope,imputation.method.temp,effect.size.metric.temp){
dat.missing = data.raw
del.chance.vector.temp = data.raw$treat_mean * deletion.chance.slope
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
one.run.of.grand.mean.calculation.function = function(dat.temp, del.rate.temp,deletion.chance.slope,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
one.run.of.grand.mean.calculation.function = function(dat.temp, del.rate.temp,deletion.chance.slope.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(test.data.missing)
return(data.missing.rma.results)
}
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
one.run.of.grand.mean.calculation.function = function(dat.temp, del.rate.temp,deletion.chance.slope.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(dat.missing)
return(data.missing.rma.results)
}
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
effect.size.metric.temp = "ROM")
test
rm(test)
test
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test.data = data.frame("control_mean" = c(1,2,3,4,5),"control_sd"=c(1,1,2,2,1),"control_n"=c(5,6,5,6,5),
"treat_mean" = c(2,3,4,5,6),"treat_sd"=c(2,1,1,1,2),"treat_n"=c(4,5,6,5,6))
test = one.run.of.grand.mean.calculation.function(dat.temp =test.data,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test.data = data.frame("control_mean" = c(1,2,3,4,5),"control_sd"=c(1,1,2,2,1),"control_n"=c(5,6,5,6,5),
"treat_mean" = c(2,3,4,5,6),"treat_sd"=c(2,1,1,1,2),"treat_n"=c(4,5,6,5,6))
test.data = data.frame("biodiv_aspect"=c("a","a","b","a","a"),"control_mean" = c(1,2,3,4,5),"control_sd"=c(1,1,2,2,1),"control_n"=c(5,6,5,6,5),
"treat_mean" = c(2,3,4,5,6),"treat_sd"=c(2,1,1,1,2),"treat_n"=c(4,5,6,5,6))
test = one.run.of.grand.mean.calculation.function(dat.temp =test.data,
del.rate.temp = 0.1,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test = one.run.of.grand.mean.calculation.function(dat.temp =test.data,
del.rate.temp = 0.2,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test
min(dat.raw$control_sd)
min(dat.raw$treat_sd)
View(dat.raw)
View(dat.raw)
?escalc
test = effect.size.calculation.function(data = dat.raw,effect.size.metric = "ROM")
View(test)
min(dat.raw$yi)
which(!(is.finite(dat.raw$yi)))
which(!(is.inf(dat.raw$yi)))
which(dat.raw$yi < 0)
is.real
which(is.infinite(dat.raw$yi))
min(dat.raw$yi)
min(dat.raw$yi,na.omit=T)
min(test$yi,na.omit=T)
min(test$yi)
min(test$vi)
View(dat.raw)
create.data.subset.function = function(data,subset.length){
data.sample.rows = sample(c(1:nrow(data)),subset.length)
return(data[data.sample.rows,])
}
delete.function = function(dat.vector,deletion.rate,deletion.chance.vector){
dat.to.delete = sample(length(dat.vector), size= round(length(dat.vector) * deletion.rate), prob=deletion.chance.vector)
dat.vector[dat.to.delete] = NA
return(dat.vector)
}
impute.function =function(data.with.missing,column.name.with.missing.values,imputation.method){
data.complete = complete(mice(data.with.missing,method = imputation.method,
m=5, maxit =20, printFlag = FALSE))
return(as.vector(data.complete[,which(names(data.complete) %in% column.name.with.missing.values)]))
}
effect.size.calculation.function = function(data, effect.size.metric){
effect.sizes = escalc(measure = effect.size.metric, data= data, append = TRUE,
m1i = treat_mean, n1i = treat_n, sd1i = treat_sd, m2i = control_mean, n2i = control_n, sd2i = control_sd)
return(effect.sizes)
}
meta_analysis.function = function(data){
rma.temp = rma.uni(yi=data$yi,vi=data$vi,method="ML")
rma.temp.results = data.frame("grand_mean" = rma.temp$b[1],
"grand_mean_lb" = rma.temp$ci.lb[1],
"grand_mean_ub" = rma.temp$ci.ub[1])
return(rma.temp.results)
}
one.run.of.grand.mean.calculation.function = function(dat.temp, del.rate.temp,deletion.chance.slope.temp,imputation.method.temp,effect.size.metric.temp){
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(dat.missing)
return(data.missing.rma.results)
}
test = one.run.of.grand.mean.calculation.function(dat.temp =test.data,
del.rate.temp = 0.2,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
test
del.rate.vector = rep(seq(from = deletion.minimum,to=deletion.maximum,by =deletion.step),repetitions.per.step)
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.2,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
names(dat.test)
names(test.data
)
names(dat.raw)
dat.missing = dat.raw
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.temp= dat.raw
dat.temp =dat.raw,
dat.temp =dat.raw
del.rate.temp = 0.2
deletion.chance.slope.temp = 1
imputation.method.temp = "pmm"
effect.size.metric.temp = "ROM"
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing$treat_sd
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
dat.missing
View(dat.missing)
min(dat.missing$vi)
length(which(dat.missing$vi == 0))
example = dat.missing[(which(dat.missing$vi == 0)),]
View(example)
example = dat.missing[(which(dat.missing$control_sd == 0)),]
View(example)
subset(dat.raw, !(control_sd == 0) & !(treat_sd==0))
dat.raw = read.csv("C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\MA_Gerstner2014_complete_observations.csv",
row.names=1,header=T)
names(dat.raw) = c("reference","biodiv_aspect","control_n","treat_n","control_mean","treat_mean","control_sd","treat_sd")
dat.raw[419,]
dat.raw = dat.raw[-419,] # clear outlier
dat.raw$control_se = dat.raw$control_sd / sqrt(dat.raw$control_n)
dat.raw$treat_se = dat.raw$treat_sd / sqrt(dat.raw$treat_n)
dat.raw = subset(dat.raw, !(control_sd == 0) & !(treat_sd==0))
which(dat.raw$treat_sd == 0)
dat.raw = read.csv("C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\MA_Gerstner2014_complete_observations.csv",
row.names=1,header=T)
str(dat.raw)
names(dat.raw) = c("reference","biodiv_aspect","control_n","treat_n","control_mean","treat_mean","control_sd","treat_sd")
#############################################
# cleaning and standard error calculation
dat.raw = dat.raw[-419,] # clear outlier
dat.raw$control_se = dat.raw$control_sd / sqrt(dat.raw$control_n)
dat.raw$treat_se = dat.raw$treat_sd / sqrt(dat.raw$treat_n)
dat.raw = subset(dat.raw, !(control_sd == 0) | !(treat_sd==0))
which(dat.raw$treat_sd == 0)
dat.temp =dat.raw
del.rate.temp = 0.2
deletion.chance.slope.temp = 1
imputation.method.temp = "pmm"
effect.size.metric.temp = "ROM"
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.2,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
data.missing.rma.results = meta_analysis.function(dat.missing)
example = dat.missing[which(dat.missing$vi == 0),]
View(example)
dat.raw = read.csv("C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\MA_Gerstner2014_complete_observations.csv",
row.names=1,header=T)
str(dat.raw)
names(dat.raw) = c("reference","biodiv_aspect","control_n","treat_n","control_mean","treat_mean","control_sd","treat_sd")
#############################################
# cleaning and standard error calculation
dat.raw = dat.raw[-419,] # clear outlier
dat.raw$control_se = dat.raw$control_sd / sqrt(dat.raw$control_n)
dat.raw$treat_se = dat.raw$treat_sd / sqrt(dat.raw$treat_n)
dat.raw = subset(dat.raw, !(control_sd == 0) | !(treat_sd==0))
View(dat.raw)
dat.temp =dat.raw
del.rate.temp = 0.2
deletion.chance.slope.temp = 1
imputation.method.temp = "pmm"
effect.size.metric.temp = "ROM"
dat.missing = dat.temp
View(dat.missing)
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.raw = read.csv("C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\MA_Gerstner2014_complete_observations.csv",
row.names=1,header=T)
str(dat.raw)
names(dat.raw) = c("reference","biodiv_aspect","control_n","treat_n","control_mean","treat_mean","control_sd","treat_sd")
#############################################
# cleaning and standard error calculation
dat.raw = dat.raw[-419,] # clear outlier
dat.raw$control_se = dat.raw$control_sd / sqrt(dat.raw$control_n)
dat.raw$treat_se = dat.raw$treat_sd / sqrt(dat.raw$treat_n)
dat.temp =dat.raw
del.rate.temp = 0.2
deletion.chance.slope.temp = 1
imputation.method.temp = "pmm"
effect.size.metric.temp = "ROM"
dat.missing = dat.temp
del.chance.vector.temp = dat.temp$treat_mean * deletion.chance.slope.temp
dat.missing$treat_sd = delete.function(dat.vector = dat.missing$control_sd,
deletion.rate = del.rate.temp,
deletion.chance.vector = del.chance.vector.temp)
dat.missing$treat_sd = impute.function(data.with.missing = dat.missing[,c("biodiv_aspect","treat_mean","treat_sd","treat_n")],
column.name.with.missing.values = "treat_sd",
imputation.method = imputation.method.temp)
dat.missing = effect.size.calculation.function(data = dat.missing,
effect.size.metric = effect.size.metric.temp)
dat.missing = subset(dat.missing, !(control_sd == 0) | !(treat_sd==0))
data.missing.rma.results = meta_analysis.function(dat.missing)
data.missing.rma.results
correct.rma.results = meta_analysis.function(dat.raw)
dat.full = dat.raw
dat.full = effect.size.calculation.function(data = dat.full,
effect.size.metric = effect.size.metric.temp)
dat.full = subset(dat.full, !(control_sd == 0) | !(treat_sd==0))
dat.full.rma.results = meta_analysis.function(dat.full)
dat.full.rma.results
test = one.run.of.grand.mean.calculation.function(dat.temp =dat.raw,
del.rate.temp = 0.02,
deletion.chance.slope.temp = 1,
imputation.method.temp = "pmm",
effect.size.metric.temp = "ROM")
