}
plot.smooth.grand.means.function = function(data){
data.smooth = smooth.ub.and.lb.for.plotting(data)
data.smooth$full_grand_mean = data$full_grand_mean[1]
data.smooth$full_grand_mean_lb = data$full_grand_mean_lb[1]
data.smooth$full_grand_mean_ub = data$full_grand_mean_ub[1]
plot=   ggplot(data=data.smooth) +
# model results
geom_ribbon(aes(x=deletion_rate,ymax=grand_mean_ub,ymin=grand_mean_lb),alpha = 0.2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="white",size=2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="black",size=0.5) +
#true grand mean
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="black",size=0.8,linetype="dotdash") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_lb),colour="black",size=1,linetype="dotted") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_ub),colour="black",size=1,linetype="dotted") +
#split data
facet_grid(. ~ imputation_method)  +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
return(plot)
}
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once(all.results)
##################################################
# define plotting funtions ----------------------
smooth.ub.and.lb.for.plotting = function(data){
df.smooth.all = data.frame("deletion_method"=NA, "x" = NA,"y" = NA,"ymin" = NA,"ymax" = NA)[0,]
for(impute.method.temp in unique(data$imputation_method)){
gg.grand.mean = ggplot(subset(data,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean)) +
geom_smooth()
gg.grand.mean.lb = ggplot(subset(df.results,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean_lb)) +
geom_smooth()
gg.grand.mean.ub = ggplot(subset(data,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean_ub)) +
geom_smooth()
df.smooth.temp = data.frame("imputation_method" = as.character(impute.method.temp),
"deletion_rate" = ggplot_build(gg.grand.mean)$data[[1]]$x,
"grand_mean" = ggplot_build(gg.grand.mean)$data[[1]]$y,
"grand_mean_lb" = ggplot_build(gg.grand.mean.lb)$data[[1]]$y,
"grand_mean_ub" = ggplot_build(gg.grand.mean.ub)$data[[1]]$y)
df.smooth.all = rbind(df.smooth.all,df.smooth.temp)
}
return(df.smooth.all)
}
plot.smooth.grand.means.function = function(data){
data.smooth = smooth.ub.and.lb.for.plotting(data)
data.smooth$full_grand_mean = data$full_grand_mean[1]
data.smooth$full_grand_mean_lb = data$full_grand_mean_lb[1]
data.smooth$full_grand_mean_ub = data$full_grand_mean_ub[1]
plot=   ggplot(data=data.smooth) +
# model results
geom_ribbon(aes(x=deletion_rate,ymax=grand_mean_ub,ymin=grand_mean_lb),alpha = 0.2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="white",size=2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="black",size=0.5) +
#true grand mean
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="black",size=0.8,linetype="dotdash") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_lb),colour="black",size=1,linetype="dotted") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_ub),colour="black",size=1,linetype="dotted") +
#split data
facet_grid(. ~ imputation_method)  +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
return(plot)
}
plot.grand.means.function = function(data){
ggplot(data=data) +
#true grand mean
geom_ribbon(aes(x=deletion_rate,ymin=full_grand_mean_lb,ymax=full_grand_mean_ub),alpha=0.2) +
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="white",size=2) +
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="grey",size=1,linetype="dotted") +
# model results
geom_smooth(aes(x=deletion_rate,y=grand_mean),se=FALSE,colour="black",size=0.9) +
geom_smooth(aes(x=deletion_rate,y=grand_mean_lb),se=FALSE,colour="black",linetype="longdash",size=0.9) +
geom_smooth(aes(x=deletion_rate,y=grand_mean_ub),se=FALSE,colour="black",linetype="longdash",size=0.9) +
#split data
facet_grid(. ~ imputation_method)  +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
}
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once(all.results)
smooth.ub.and.lb.for.plotting = function(data){
df.smooth.all = data.frame("deletion_method"=NA, "x" = NA,"y" = NA,"ymin" = NA,"ymax" = NA)[0,]
for(impute.method.temp in unique(data$imputation_method)){
gg.grand.mean = ggplot(subset(data,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean)) +
geom_smooth()
gg.grand.mean.lb = ggplot(subset(data,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean_lb)) +
geom_smooth()
gg.grand.mean.ub = ggplot(subset(data,imputation_method %in% impute.method.temp),aes(deletion_rate,grand_mean_ub)) +
geom_smooth()
df.smooth.temp = data.frame("imputation_method" = as.character(impute.method.temp),
"deletion_rate" = ggplot_build(gg.grand.mean)$data[[1]]$x,
"grand_mean" = ggplot_build(gg.grand.mean)$data[[1]]$y,
"grand_mean_lb" = ggplot_build(gg.grand.mean.lb)$data[[1]]$y,
"grand_mean_ub" = ggplot_build(gg.grand.mean.ub)$data[[1]]$y)
df.smooth.all = rbind(df.smooth.all,df.smooth.temp)
}
return(df.smooth.all)
}
plot.smooth.grand.means.function = function(data){
data.smooth = smooth.ub.and.lb.for.plotting(data)
data.smooth$full_grand_mean = data$full_grand_mean[1]
data.smooth$full_grand_mean_lb = data$full_grand_mean_lb[1]
data.smooth$full_grand_mean_ub = data$full_grand_mean_ub[1]
plot=   ggplot(data=data.smooth) +
# model results
geom_ribbon(aes(x=deletion_rate,ymax=grand_mean_ub,ymin=grand_mean_lb),alpha = 0.2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="white",size=2) +
geom_line(aes(x=deletion_rate,y=grand_mean),colour="black",size=0.5) +
#true grand mean
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="black",size=0.8,linetype="dotdash") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_lb),colour="black",size=1,linetype="dotted") +
geom_line(aes(x=deletion_rate,y=full_grand_mean_ub),colour="black",size=1,linetype="dotted") +
#split data
facet_grid(. ~ imputation_method)  +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
return(plot)
}
plot.grand.means.function = function(data){
ggplot(data=data) +
#true grand mean
geom_ribbon(aes(x=deletion_rate,ymin=full_grand_mean_lb,ymax=full_grand_mean_ub),alpha=0.2) +
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="white",size=2) +
geom_line(aes(x=deletion_rate,y=full_grand_mean),colour="grey",size=1,linetype="dotted") +
# model results
geom_smooth(aes(x=deletion_rate,y=grand_mean),se=FALSE,colour="black",size=0.9) +
geom_smooth(aes(x=deletion_rate,y=grand_mean_lb),se=FALSE,colour="black",linetype="longdash",size=0.9) +
geom_smooth(aes(x=deletion_rate,y=grand_mean_ub),se=FALSE,colour="black",linetype="longdash",size=0.9) +
#split data
facet_grid(. ~ imputation_method)  +
theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
}
plot.all.results.at.once(all.results)
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once(all.results)
svg.filename
paste(c(results.path,"/",svg.filename,".svg"),collapse="")
i
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
plot.smooth.grand.means.function(all.results[[i]])
nameS(all.results[[i]])
names(all.results[[i]])
i=2
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
plot.smooth.grand.means.function(all.results[[i]])
View(test)
append.grand.mean.full.model.to.df.results = function(data){
# results from rma. with full data
dat.full = effect.size.calculation.function(data = dat.raw,effect.size.metric = "ROM")
dat.full.rma.results = meta_analysis.function(dat.full)
names(dat.full.rma.results) = c("full_grand_mean","full_grand_mean_lb","full_grand_mean_ub","full_sample_size_for_rma_calc")
#append to df.results
df.results = cbind(data,dat.full.rma.results)
return(df.results)
}
df.results = run.over.all.methods(dat.raw = dat.raw,
data.sample.size.percentage = 1,
imp.methods.vector = c("sample","mean","pmm","norm.nob","norm.boot","norm.predict","norm","cart","rf"),
deletion.chance.slope = 0,
deletion.minimum = 0.1,
deletion.maximum = 0.9,
deletion.step = 0.1,
repetitions.per.step = 2,
data.size = 1,
effect.size.metric = "ROM")
append.grand.mean.full.model.to.df.results(df.results)
write.table(df.results,"C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\results\\all_methods_del_slope_0_data_1.csv",
sep="\t",quote=F,dec=".",row.names = FALSE)
dev.off*
dev.ofF()
dev.off()
dev.off()
dev.off()
names(df.results)
append.grand.mean.full.model.to.df.results
dat.full = effect.size.calculation.function(data = dat.raw,effect.size.metric = "ROM")
dat.full.rma.results = meta_analysis.function(dat.full)
names(dat.full.rma.results) = c("full_grand_mean","full_grand_mean_lb","full_grand_mean_ub","full_sample_size_for_rma_calc")
dat.full.rma.results
append.grand.mean.full.model.to.df.results = function(data){
# results from rma. with full data
dat.full = effect.size.calculation.function(data = dat.raw,effect.size.metric = "ROM")
dat.full.rma.results = meta_analysis.function(dat.full)
names(dat.full.rma.results) = c("full_grand_mean","full_grand_mean_lb","full_grand_mean_ub","full_sample_size_for_rma_calc")
#append to df.results
df.results = cbind(data,dat.full.rma.results)
return(df.results)
}
df.results = append.grand.mean.full.model.to.df.results(df.results)
names(df.results)
write.table(df.results,"C:\\Users\\Agando\\Desktop\\aktuelle Arbeiten\\SESYNC_multiple_imputation\\LUBDES_multiple_imputations\\results\\all_methods_del_slope_0_data_1.csv",
sep="\t",quote=F,dec=".",row.names = FALSE)
results.path = "C:/Users/Agando/Desktop/aktuelle Arbeiten/SESYNC_multiple_imputation/LUBDES_multiple_imputations/results"
get.all.result.filenames = function(path){
complete.file.names = character()
for(i in 1:length(list.files(path))){
complete.file.names[i] = paste(c(path,list.files(path)[i]),collapse="/")
}
return(complete.file.names)
}
all.results.files = get.all.result.filenames(results.path)
load.all.results.in.list = function(all.results.files){
all.results = list()
for(i in 1:length(load.all.results.in.list)){
all.results[[i]] = read.csv(all.results.files[i],sep="\t",header=T,dec=".")
}
return(all.results)
}
all.results = lapply(all.results.files,function(x) read.csv(file=x,sep="\t",header=T,dec="."))
all.results
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once(all.results)
warnings()
str(all.results)
str(all.results[[1]])
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
list.files(results.path)[i]
i=1
list.files(results.path)[i]
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
dev.off()
plot.smooth.grand.means.function(all.results[[i]])
paste(c(results.path,"/",svg.filename,".svg")
paste(c(results.path,"/",svg.filename,".svg"),collapse="")
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once = function(all.results){
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
}
plot.all.results.at.once(all.results)
plot.all.results.at.once(all.results)
i
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
i=10
dev.off()
length(all.results)
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
i
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
i
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
paste(c(results.path,"/",svg.filename,".svg")
paste(c(results.path,"/",svg.filename,".svg"),collapse="")
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
for(i in 1:1){
print(i)
}
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
#insert the path of your results directory in here
results.path = "C:/Users/Agando/Desktop/aktuelle Arbeiten/SESYNC_multiple_imputation/LUBDES_multiple_imputations/results"
get.all.result.filenames = function(path){
complete.file.names = character()
for(i in 1:length(list.files(path))){
complete.file.names[i] = paste(c(path,list.files(path)[i]),collapse="/")
}
return(complete.file.names)
}
all.results.files = get.all.result.filenames(results.path)
load.all.results.in.list = function(all.results.files){
all.results = list()
for(i in 1:length(load.all.results.in.list)){
all.results[[i]] = read.csv(all.results.files[i],sep="\t",header=T,dec=".")
}
return(all.results)
}
all.results = lapply(all.results.files,function(x) read.csv(file=x,sep="\t",header=T,dec="."))
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),width=10,height=5)
plot.smooth.grand.means.function(all.results[[i]])
dev.off()
}
foi=
i=
i
i=1
?ggsave
ggsave(plot.smooth.grand.means.function(all.results[[i]],
filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
width=10,height=5))
plot = plot.smooth.grand.means.function(all.results[[i]]
plot = plot.smooth.grand.means.function(all.results[[i]])
plot
dev.off()
dev.off()
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
dev.off
dev.on()
dev.off()
i=10
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
length(all.results)
i=
i
svg.filename = substr(list.files(results.path)[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
list.files(results.path)[i]
list.files(results.path)
list.files(results.path)[i]
#insert the path of your results directory in here
results.path = "C:/Users/Agando/Desktop/aktuelle Arbeiten/SESYNC_multiple_imputation/LUBDES_multiple_imputations/results"
get.all.result.filenames = function(path){
complete.file.names = character()
for(i in 1:length(list.files(path,pattern="*.csv"))){
complete.file.names[i] = paste(c(path,list.files(path,pattern="*.csv")[i]),collapse="/")
}
return(complete.file.names)
}
all.results.files = get.all.result.filenames(results.path)
load.all.results.in.list = function(all.results.files){
all.results = list()
for(i in 1:length(load.all.results.in.list)){
all.results[[i]] = read.csv(all.results.files[i],sep="\t",header=T,dec=".")
}
return(all.results)
}
all.results = lapply(all.results.files,function(x) read.csv(file=x,sep="\t",header=T,dec="."))
all.results
str(all.results)
i
i=1
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
i=2
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
i=3
i=2
paste(c(results.path,"/",svg.filename,".svg")
paste(c(results.path,"/",svg.filename,".svg"),collapse="")
svg.filename
list.files(results.path,pattern="*.csv")
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
list.files(results.path,pattern="*.csv")
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
i =
i
i =3
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
results.path = "C:/Users/Agando/Desktop/aktuelle Arbeiten/SESYNC_multiple_imputation/LUBDES_multiple_imputations/results"
get.all.result.filenames = function(path){
complete.file.names = character()
for(i in 1:length(list.files(path,pattern="*.csv"))){
complete.file.names[i] = paste(c(path,list.files(path,pattern="*.csv")[i]),collapse="/")
}
return(complete.file.names)
}
all.results.files = get.all.result.filenames(results.path)
load.all.results.in.list = function(all.results.files){
all.results = list()
for(i in 1:length(load.all.results.in.list)){
all.results[[i]] = read.csv(all.results.files[i],sep="\t",header=T,dec=".")
}
return(all.results)
}
all.results = lapply(all.results.files,function(x) read.csv(file=x,sep="\t",header=T,dec="."))
results.path = "C:/Users/Agando/Desktop/aktuelle Arbeiten/SESYNC_multiple_imputation/LUBDES_multiple_imputations/results"
all.results.files = get.all.result.filenames(results.path)
all.results.files
all.results
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
i=1
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
plot = plot.smooth.grand.means.function(all.results[[i]])
plot
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
length(all.results)
i=2
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path)[i])-4)
svg.filename
list.files(results.path,pattern="*.csv")
list.files(results.path,pattern="*.csv")[i]
for(i in 1:length(all.results)){
svg.filename = substr(list.files(results.path,pattern="*.csv")[i],1,nchar(list.files(results.path,pattern="*.csv")[i])-4)
plot = plot.smooth.grand.means.function(all.results[[i]])
ggsave(filename=paste(c(results.path,"/",svg.filename,".svg"),collapse=""),
plot,width=10,height=5)
}
#############################################
# config algorithm --------------------------
#random deletion, 100% sample size
df.results = run.over.all.methods(dat.raw = dat.raw,
data.sample.size.percentage = 1,
imp.methods.vector = c("sample","mean","pmm","norm.nob","norm.boot","norm.predict","norm","cart","rf"),
deletion.chance.slope = 0,
deletion.minimum = 0.1,
deletion.maximum = 0.9,
deletion.step = 0.1,
repetitions.per.step = 2,
data.size = 1,
effect.size.metric = "ROM")
